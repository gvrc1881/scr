{"version":3,"sources":["webpack:///./src/app/components/mail-confirm/mail-confirm.component.html","webpack:///./src/app/components/mail-confirm/mail-confirm.component.ts","webpack:///./src/app/components/mail-confirm/mail-confirm.module.ts","webpack:///./src/app/services/auth.service.ts"],"names":[],"mappings":"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","file":"components-mail-confirm-mail-confirm-module-ngfactory-es2015.js","sourcesContent":["<div class=\"content\">\n  <div class=\"row\">\n    <div class=\"col-sm-8\">\n      <div class=\"login-bg-image\">\n        <img src=\"assets/Images/bg-login.png\" alt=\"bg image\" class=\"img-responsive\">\n      </div>\n    </div>\n    <div class=\"col-sm-4\">\n      <div class=\"login\">\n        <div class=\"logo\"><img src=\"assets/Images/srijay_logo1.PNG\" style=\"width: 70%; padding: 10px\"> </div>\n        <div class=\"logincontent\">\n          <div id=\"mail-confirm\" fxLayout=\"column\" fusePerfectScrollbar>\n            <div id=\"mail-confirm-form-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n              <div id=\"mail-confirm-form\">\n                <div class=\"form-title\">Confirm your email address!</div>\n                <div class=\"subtitle\">\n                  <p>\n                    A confirmation e-mail has been sent to <b> {{email}}</b>.\n                  </p>\n                  <p>\n                    Check your inbox and click on the \"Confirm my email\" link to confirm your email address.\n                  </p>\n                </div>\n                <div class=\"message\">\n                  <a class=\"link\" [routerLink]=\"['/login']\">Go back to login page</a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport {AlertService } from '../../services/alert.service';\nimport {\n  Country,\n  UsernameValidator,\n  PasswordValidator,\n  ParentErrorStateMatcher,\n  PhoneValidator\n} from '../../validators';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-mail-confirm',\n  templateUrl: './mail-confirm.component.html',\n  styleUrls: ['./mail-confirm.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MailConfirmComponent implements OnInit {\n  email:string;\n  returnUrl: string;\n  userDetailsForm: FormGroup;\n  accountDetailsForm: FormGroup;\n  invalid:boolean=false;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n  \n  parentErrorStateMatcher = new ParentErrorStateMatcher();\n\n  genders = [\n    \"Male\",\n    \"Female\",\n    \"Other\"\n  ];\n\n  countries = [\n    new Country('UY', 'Uruguay'),\n    new Country('US', 'United States'),\n    new Country('AR', 'Argentina')\n  ];\n\n\n  validation_messages = {\n    'fullname': [\n      { type: 'required', message: 'Full name is required' }\n    ],\n    'bio': [\n      { type: 'maxlength', message: 'Bio cannot be more than 256 characters long' },\n    ],\n    'gender': [\n      { type: 'required', message: 'Please select your gender' },\n    ],\n    'birthday': [\n      { type: 'required', message: 'Please insert your birthday' },\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required' },\n      { type: 'validCountryPhone', message: 'Phone incorrect for the country selected' }\n    ]\n  };\n\n  account_validation_messages = {\n    'username': [\n      { type: 'required', message: 'Username is required' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long' },\n      { type: 'pattern', message: 'Your username must contain only numbers and letters' },\n      { type: 'validUsername', message: 'Your username has already been taken' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' },\n      { type: 'areEqual', message: 'Password mismatch' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions' }\n    ]\n  }\n\n  constructor(\n    private fb: FormBuilder,    \n    private authService: AuthService, \n    private router: Router, \n    private formBuilder: FormBuilder,\n    private spinnerService: Ng4LoadingSpinnerService,\n    private authenticationService: AuthenticationService,\n    private alertService: AlertService,\n    private route: ActivatedRoute,\n\n    ) { }\n\n  ngOnInit() {\n    if(!!localStorage.getItem(\"email\")){\n      this.email = localStorage.getItem(\"email\");\n    }\n    this.createForms();\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\n  }\n\n  createForms() {\n    // matching passwords validation\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ]))/* ,\n      confirm_password: new FormControl('', Validators.required) */\n    }/* , (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    } */);\n\n    // country & phone validation\n    let country = new FormControl(this.countries[0], Validators.required);\n\n    let phone = new FormControl('', {\n      validators: Validators.compose([\n        Validators.required,\n        PhoneValidator.validCountryPhone(country)\n      ])\n    });\n\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    // user details form validations\n    this.userDetailsForm = this.fb.group({\n      fullname: ['Homero Simpson', Validators.required ],\n      bio: [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\", Validators.maxLength(256)],\n      birthday: ['', Validators.required],\n      gender: new FormControl(this.genders[0], Validators.required),\n      country_phone: this.country_phone_group\n    });\n    // user links form validations\n    this.accountDetailsForm = this.fb.group({\n      /* username: new FormControl('', Validators.compose([\n       UsernameValidator.validUsername,\n       Validators.maxLength(25),\n       Validators.minLength(5),\n       Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n       Validators.required\n      ])), */\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n       password: new FormControl('', Validators.compose([\n          Validators.minLength(5),\n          Validators.required\n         // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n        ])),\n      terms: new FormControl(false, Validators.pattern('true'))\n    })\n\n  }\n\n  onSubmitAccountDetails(value){\n    console.log(value);\n    //this.router.navigate(['/dashboard']);\n    this.spinnerService.show();\n       let  email:string =this.accountDetailsForm.value.email;\n       let password:string=this.accountDetailsForm.value.password;\n        console.log(email+ \" : \"+password);\n        \n        console.log(\"this.loginForm: \"+(this.accountDetailsForm))\n      // return false;\n        this.authenticationService.login(email, password)\n            .subscribe(\n                data => {\n                    this.authenticationService.getLoginUserData(email, password)\n                    .subscribe(\n                        userdata=>{\n                            console.log(\"navigate\");\n                            this.spinnerService.hide();\n                            //this.fuseNavigationService.setNavigationModel(new FuseNavigationModel());\n                            console.log(\"this.returnUrl: \"+this.returnUrl)\n                            this.router.navigate([this.returnUrl]);\n                        },\n                        error =>{\n                            this.alertService.error(error);\n                            this.spinnerService.hide();\n                            //this.loading = false;\n                        }\n                    );\n                },\n                error => {\n                    this.invalid = true;\n                    this.alertService.error(error);\n                    this.spinnerService.hide();\n                    //this.loading = false;\n                });\n  }\n\n  onSubmitUserDetails(value){\n    console.log(value);\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MailConfirmComponent } from './mail-confirm.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule, MatIconModule, MatCheckboxModule, MatInputModule, } from '@angular/material';\r\nimport { CommonModule } from '@angular/common';\r\n/* import { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\r\nimport { AuthenticationService } from 'src/app/services/authentication.service';\r\nimport { AlertService } from 'src/app/services/alert.service';\r\n */\r\n\r\nconst routes = [\r\n    {\r\n        path     : '',\r\n        component: MailConfirmComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        MailConfirmComponent,        \r\n    ],\r\n    imports     : [        \r\n        RouterModule.forChild(routes),       \r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatFormFieldModule,\r\n        CommonModule,\r\n        MatIconModule,\r\n        MatCheckboxModule,\r\n        MatInputModule\r\n        \r\n    ],\r\n    providers: [\r\n       /* Ng4LoadingSpinnerService,\r\n       AuthenticationService,\r\n       AlertService */    \r\n    ],\r\n    exports:[\r\n        MailConfirmComponent\r\n    ]\r\n})\r\n\r\nexport class MailConfirmModule\r\n{\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { User } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor() { }\r\n\r\n  public login(userInfo: User){\r\n    localStorage.setItem('ACCESS_TOKEN', \"access_token\");\r\n  }\r\n\r\n  public isLoggedIn(){\r\n    return localStorage.getItem('ACCESS_TOKEN') !== null;\r\n\r\n  }\r\n\r\n  public logout(){\r\n    localStorage.removeItem('ACCESS_TOKEN');\r\n  }\r\n}"],"sourceRoot":""}