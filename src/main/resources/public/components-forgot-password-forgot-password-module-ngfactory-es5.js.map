{"version":3,"sources":["./node_modules/ng4-loading-spinner/ng4-loading-spinner.d.ts.Ng4LoadingSpinnerComponent.html","./src/app/components/forgot-password/forgot-password.component.html","./src/app/components/forgot-password/forgot-password.component.ts","./src/app/components/forgot-password/forgot-password.module.ts"],"names":[],"mappings":"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","file":"components-forgot-password-forgot-password-module-ngfactory-es5.js","sourcesContent":["<div #spinnerContainer [class]=\"showSpinner ? 'visible spinner center' : 'hidden spinner center'\" [innerHTML]=\"template\">     </div> <div id=\"loading-spinner-text\" class=\"loading-spinner-text\" [style.zIndex]=\"zIndex\" [class]=\"showSpinner ? 'visible loading-text' : 'hidden loading-text'\"> {{loadingText}} </div> ","<ng4-loading-spinner> </ng4-loading-spinner>\n<div class=\"forget-password-bg\" >\n<div class=\"container\">\n  <div class=\"row\">\n   \n    <div class=\"col-md-12\">\n      <div class=\"login forgot-password-box\">\n        <div class=\"logo\">  <div class=\"form-title\">Recover your password</div> </div>\n\n        <!-- SEND EMAIL LINK -->\n        <div class=\"logincontent\" *ngIf=\"forgotPasswordForm\">\n          <form [formGroup]=\"forgotPasswordDetailsForm\" novalidate\n            (ngSubmit)=\"onSubmitForgotPasswordDetails(forgotPasswordDetailsForm.value)\">\n          \n            <div class=\"clearfix\"></div>\n            <mat-form-field class=\"full-width\">\n              <input matInput type=\"email\" placeholder=\"Email\" formControlName=\"email\" required>\n              <mat-error *ngFor=\"let validation of account_validation_messages.email\">\n                <mat-error class=\"error-message\"\n                  *ngIf=\"forgotPasswordDetailsForm.get('email').hasError(validation.type) && (forgotPasswordDetailsForm.get('email').dirty || forgotPasswordDetailsForm.get('email').touched)\">\n                  {{validation.message}}</mat-error>\n              </mat-error>\n            </mat-form-field>\n            <div class=\"clearfix\"></div>\n            <button class=\"btn btn-primary\" color=\"primary\" mat-raised-button type=\"submit\"\n              [disabled]=\"!forgotPasswordDetailsForm.valid\">\n              SEND RESET LINK\n            </button>\n            <hr>\n            <div class=\"login-link\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n              <a class=\"link\" [routerLink]=\"['/login']\">Go back to login</a>\n            </div>\n           \n          </form>\n          <div *ngIf=\"forgotPasswordMessageCondition\">\n              {{forgotPasswordMessage}}\n          </div>\n\n         \n\n        </div>\n\n        <!-- EMAIL CONFIRMATION MESSAGE -->\n        <div class=\"logincontent\" *ngIf=\"mailConfirmationMessage\">\n            <div id=\"mail-confirm\" fxLayout=\"column\" fusePerfectScrollbar>\n              <div id=\"mail-confirm-form-wrapper\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n                <div id=\"mail-confirm-form\">\n                  <div class=\"form-title\">Confirm your email address!</div>\n                  <div class=\"subtitle\">\n                    <p>\n                      A confirmation e-mail has been sent to <b> {{email}}</b>.\n                    </p>\n                    <p>\n                      Check your inbox and click on the \"Confirm my email\" link to confirm your email address.\n                    </p>\n                  </div>\n                  <div class=\"message\">\n                    <a class=\"link\" [routerLink]=\"['/login']\">Go back to login page</a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        <!-- RESET PASSWORD FORM-->\n        <div class=\"logincontent\" *ngIf=\"resetPasswordForm\">\n            <form [formGroup]=\"resetPasswordDetailsForm\" novalidate *ngIf=\"passwordBlock\"\n              (ngSubmit)=\"onSubmitResetPasswordDetails(resetPasswordDetailsForm.value)\">\n              <div class=\"title\">Reset Your Password</div>\n           \n              <div formGroupName=\"matching_passwords\">\n                <mat-form-field class=\"full-width\">\n                  <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required>\n                  <mat-error *ngFor=\"let validation of change_password_validation_messages.password\">\n                    <mat-error class=\"error-message\"\n                      *ngIf=\"resetPasswordDetailsForm.get('matching_passwords').get('password').hasError(validation.type) && (resetPasswordDetailsForm.get('matching_passwords').get('password').dirty || resetPasswordDetailsForm.get('matching_passwords').get('password').touched)\">\n                      {{validation.message}}</mat-error>\n                  </mat-error>\n                </mat-form-field>\n                <mat-form-field class=\"full-width\">\n                  <input matInput type=\"password\" placeholder=\"Confirm Password\" formControlName=\"confirm_password\"\n                    [errorStateMatcher]=\"parentErrorStateMatcher\" required>\n                  <mat-error *ngFor=\"let validation of change_password_validation_messages.confirm_password\">\n                    <mat-error class=\"error-message\"\n                      *ngIf=\"(resetPasswordDetailsForm.get('matching_passwords').get('confirm_password').hasError(validation.type)|| resetPasswordDetailsForm.get('matching_passwords').hasError(validation.type)) && (resetPasswordDetailsForm.get('matching_passwords').get('confirm_password').dirty || resetPasswordDetailsForm.get('matching_passwords').get('confirm_password').touched)\">\n                      {{validation.message}}</mat-error>\n                  </mat-error>\n                </mat-form-field>\n              </div>          \n  \n              <button class=\"submit-btn\" color=\"primary\" mat-raised-button type=\"submit\"\n                [disabled]=\"!resetPasswordDetailsForm.valid\">\n                Reset My Password\n              </button>\n              <div class=\"form-actions\"></div>\n            </form>\n            <div *ngIf=\"tokenMessage\">\n              Token has been expired.\n              please click   <div class=\"login\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                  <a class=\"link\" [routerLink]=\"['/login']\">Login</a>\n                </div>\n          </div>\n  \n          <div *ngIf=\"resetPassword\">\n            Password Updated Successfully.\n            please click on  <div class=\"login\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n              <a class=\"link\" [routerLink]=\"['/login']\">Login</a>\n            </div>\n        </div>\n          </div>\n\n\n      </div>\n    </div>\n  </div>\n</div>\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { AlertService } from '../../services/alert.service';\nimport {\n  PasswordValidator,\n  ParentErrorStateMatcher\n} from '../../validators';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPasswordForm:boolean=true;\n  mailConfirmationMessage:boolean=false;\n  resetPasswordForm:boolean=false;\n\n  email:string;\n  forgotPasswordMessageCondition: boolean = false;\n  forgotPasswordMessage: string = \"\";\n  returnUrl: string;\n  userDetailsForm: FormGroup;\n  forgotPasswordDetailsForm: FormGroup;\n  invalid: boolean = false;\n  //matching_passwords_group: FormGroup;\n  //country_phone_group: FormGroup;\n  //parentErrorStateMatcher = new ParentErrorStateMatcher();\n\n  tokenMessage: boolean = false;\n  tokenValid: boolean = true;\n  passwordBlock: boolean = true;\n  resetPassword: boolean = false;\n  //returnUrl: string;\n  //userDetailsForm: FormGroup;\n  resetPasswordDetailsForm: FormGroup;\n  resetinvalid: boolean = false;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n  tokenResponse: any;\n  parentErrorStateMatcher = new ParentErrorStateMatcher();\n\n  change_password_validation_messages = {\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' },\n      { type: 'areEqual', message: 'Password mismatch' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one number and one special character' }\n    ]\n  }\n\n  account_validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ]\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private spinnerService: Ng4LoadingSpinnerService,\n    private authenticationService: AuthenticationService,\n    private alertService: AlertService,\n    private route: ActivatedRoute,\n\n  ) { }\n\n  ngOnInit() {\n    window.scrollTo(0, 0);\n    this.tokenValid = !!this.route.snapshot.queryParams && !!this.route.snapshot.queryParams.token ? false : true;    \n    if (!this.tokenValid) {\n      this.checkTokenIsValid(this.route.snapshot.queryParams.token);\n      this.createResetForms();\n      this.forgotPasswordForm=false;\n      this.mailConfirmationMessage=false;\n      this.resetPasswordForm=true;\n    }  \n    else{\n      this.createForms();\n      this.forgotPasswordForm=true;\n      this.mailConfirmationMessage=false;\n      this.resetPasswordForm=false;\n    }\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\n  }\n\n  createForms() {\n    // user links form validations\n    this.forgotPasswordDetailsForm = this.fb.group({\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ]))\n    })\n\n  }\n\n  checkTokenIsValid(token) {\n    this.spinnerService.show();\n    this.authenticationService.checkTokenIsValid(token)\n      .subscribe(\n        tokenValidResponse => {         \n          console.log(JSON.stringify(tokenValidResponse))\n          this.tokenResponse = tokenValidResponse;\n          if (!!tokenValidResponse && tokenValidResponse.code == 200) {\n            this.tokenMessage = false;\n            this.passwordBlock = true;\n          } else {\n            this.tokenMessage = true;\n            this.passwordBlock = false;\n          }\n          this.spinnerService.hide();\n        },\n        error => {\n          this.alertService.error(error);\n          this.spinnerService.hide();\n        }\n      );\n  }\n\n  createResetForms() {\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^!&*+=]).*$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n    this.resetPasswordDetailsForm = this.fb.group({\n      matching_passwords: this.matching_passwords_group,\n    })\n\n  }\n\n  onSubmitResetPasswordDetails(value) {\n    this.spinnerService.show();\n    let email: string = this.tokenResponse.user.email;\n    let password: string = value.matching_passwords.password;\n    let user = {\n      \"email\": email,\n      \"password\": password\n    }\n\n    this.authenticationService.resetPassword(user)\n      .subscribe(\n        response => {\n\n          if (!!response && response.code == 200) {\n            this.resetPassword = true;\n            this.passwordBlock = false;\n          } else {\n            this.resetPassword = false;\n            this.passwordBlock = true;\n          }\n\n        },\n        error => {\n          this.invalid = true;\n          this.alertService.error(error);\n          this.spinnerService.hide();\n        });\n  }\n\n\n  onSubmitForgotPasswordDetails(value) {\n    this.spinnerService.show();\n    let email: string = this.forgotPasswordDetailsForm.value.email;\n    this.spinnerService.hide();\n    this.authenticationService.forgotPassword(email)\n      .subscribe(\n        response => {\n          if (!!response && response.code == 200) {\n            //this.router.navigate(['/mailConfirmation']);\n            this.forgotPasswordForm=false;\n            this.mailConfirmationMessage=true;\n            this.resetPasswordForm = false;\n            this.email = email;\n           // localStorage.setItem(\"email\", email);\n          } else {\n            this.forgotPasswordMessageCondition = true;\n            this.forgotPasswordMessage = response.message;\n            this.forgotPasswordForm=true;\n            this.mailConfirmationMessage=false;\n            this.resetPasswordForm = false;\n          }\n        },\n        error => {\n          this.invalid = true;\n          this.alertService.error(error);\n          this.spinnerService.hide();\n        });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatFormFieldModule, MatIconModule, MatCheckboxModule, MatInputModule, } from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { Ng4LoadingSpinnerModule } from 'ng4-loading-spinner';\n\nconst routes = [\n    {\n        path: '',\n        component: ForgotPasswordComponent\n    }\n];\n\n@NgModule({\n    declarations: [\n        ForgotPasswordComponent,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n        Ng4LoadingSpinnerModule.forRoot(),\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        CommonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatInputModule\n\n    ],\n    providers: [\n\n    ],\n    exports: [\n        ForgotPasswordComponent\n    ]\n})\n\nexport class ForgotPasswordModule {\n\n}\n"],"sourceRoot":""}