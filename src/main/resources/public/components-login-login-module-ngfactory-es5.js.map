{"version":3,"sources":["./node_modules/ng4-loading-spinner/ng4-loading-spinner.d.ts.Ng4LoadingSpinnerComponent.html","./src/app/components/login/login.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHAAA,kLAAyH,KAAY,8NAA2J,kFAAiB,yDAA1R,qFAA0E,GAAC,mBAAsB,WAAxH,YAAyH,EAAlG,SAA0E,EAAC,SAAsB,GAAyE,mBAAuB,SAAC,iFAAsE,GAA1J,YAA2J,EAA/F,SAAuB,EAAC,SAAsE,GAAC,wDAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCuBzR,6VACmK,gFAC3I,iCAFxB,qGACmK,+EAC3I;oGAH1B,mVAA2E,IACzE,uYACmK,iDAAjK,qLAAgK,aADlK,YACmK,EAAjK,SAAgK,2BAFpK,qGAA2E;oGAUzE,6VACmK,gFAC3I,iCAFxB,qGACmK,+EAC3I;oGAH1B,oVAA2E,IACzE,uYACmK,iDAAjK,qLAAgK,aADlK,YACmK,EAAjK,SAAgK,2BAFpK,qGAA2E;oGA8B7E,mJAAuD,KACnD;;;gZAA6I,GAApG,uDAAgC,IAAoE,sFACpI,2BADgC,6CAAgC,GAAzE,YAA6I,EAApG,SAAgC,2BAAzE,oMAA6I;oGA9DrK,0nBAAqB,IACrB,sKAAyC,KACvC,qJAA8B,KAC5B,8IAAuB,KACrB,wIAAiB,KACf,0RAEqC,KAIrC,gJAAyB,KACrB,0IAAmB,KACf,8IAAwB,KAAC,8IAAuB,kGAAqB,MAErE,kJAA0B,KACxB;;;;;wBACgE;MAA9D;;wBAA6D;MAD/D,m0BACgE,IAG9D,uqFAAmC,MACjC;;;;;;;;;;;;;;;;;;;;;i1FAAuF,KACvF,8cAA2E,IAO7E,grFAAmC,MACjC;;;;;;;;;;;;;;;;;;;;;m1FAA2F,KAC3F,8cAA2E,IAQ7E,s6CAAe,sFAEf,MAMA,0IAAmB,KAGrB,4OACyC,oFAEzC,MAEE,iJAA0B,KAE5B,yIAAkB,KAChB,oJAA6B,KACzB;;;iZAAmJ,GAAnH,wDAAkC,IAAiF,sFAAc,MAErK,wYAAuD,iDA7CnD,mBAAgC,qBAAtC,aACgE,EAD1D,SAAgC,GAK4C,mBAAQ,EAAtF,aAAuF,EAAT,UAAQ,GAAnC,2BAA0B,EAA7E,aAAuF,EAApC,UAA0B,GAAjD,2BAAsB,EAA4B,mBAAQ,EAAtE,uBAAW,EAA3B,aAAuF,EAA3D,UAAsB,EAA4B,UAAQ,EAAtE,UAAW,GAChB,oBAA+D,uCAA1E,aAA2E,EAAhE,UAA+D,GAQQ,mBAAQ,EAA1F,aAA2F,EAAT,UAAQ,GAAnC,2BAA0B,EAAjF,aAA2F,EAApC,UAA0B,GAAjD,2BAAsB,EAA4B,mBAAQ,EAA1E,2BAAe,EAA/B,aAA2F,EAA3D,UAAsB,EAA4B,UAAQ,EAA1E,UAAe,GACpB,oBAA+D,uCAA1E,aAA2E,EAAhE,UAA+D,GA4BxC,kDAAkC,GAAlE,aAAmJ,EAAnH,WAAkC,GAEzC,sBAAyB,mBAAtD,aAAuD,EAA1B,WAAyB,mDA7CxD,stBACgE,GAG9D,g6EAAmC,IACjC,+zDAAuF,IAQzF,o6EAAmC,IACjC,+zDAA2F,IAS7F,orBAAe,GAYf,sBAAsC,2BADxC,aACyC,EAAvC,WAAsC,GAQlC,+MAAmJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3D3K;AAAA;AAAA;AAAA;AAAA;AAAqE;AACY;AAQvD;AAI1B;IA+BE,wBACU,EAAe,EACf,MAAc,EACd,cAAwC,EACxC,qBAA4C,EAC5C,YAA0B,EAC1B,KAAqB,EACrB,aAA4B;QAN5B,OAAE,GAAF,EAAE,CAAa;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAA0B;QACxC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,UAAK,GAAL,KAAK,CAAgB;QACrB,kBAAa,GAAb,aAAa,CAAe;QA/BtC,kBAAa,GAAY,IAAI,CAAC;QAC9B,qBAAgB,GAAY,IAAI,CAAC;QAIjC,YAAO,GAAY,KAAK,CAAC;QAKzB,4BAAuB,GAAG,IAAI,mEAAuB,EAAE,CAAC;QAExD,gCAA2B,GAAG;YAC5B,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;gBACtD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,wBAAwB,EAAE;aACvD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;gBAC7E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,kFAAkF,EAAE;aACjH;SACF;IAUG,CAAC;IACL,iCAAQ,GAAR;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,YAAY,CAAC;IAChF,CAAC;IAED,yCAAgB,GAAhB;QAAA,iBAMC;QALC,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,CAAC,SAAS,CAAC,kBAAQ;YAC9D,KAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;QACnC,CAAC,EAAE,eAAK;YACN,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAW,GAAX;QACE,8BAA8B;QAC9B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtC,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,mBAAmB,CAAC;aACxC,CAAC,CAAC;YACH,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,QAAQ;gBACnB,wEAAwE;aACzE,CAAC,CAAC,IAAG;SAEP,CAAC;IAEJ,CAAC;IAED,+CAAsB,GAAtB,UAAuB,KAAK;QAA5B,iBAiDC;QAhDC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC3B,IAAI,QAAQ,GAAW,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC9D,IAAI,QAAQ,GAAW,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC9D,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;aACjD,SAAS,CACR,cAAI;YACF,KAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC;iBAC5D,SAAS,CACR,kBAAQ;gBACN,OAAO,CAAC,GAAG,CAAC,YAAY,GAAC,QAAQ,CAAC,CAAC;gBACnC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvC,KAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,kBAAQ;oBACjF,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC9C,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAC7D,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;oBACrB,yBAAyB;oBACzB,IAAG,KAAI,CAAC,IAAI,EAAC;wBACX,KAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;6BACzD,SAAS,CAAC,kBAAQ;4BACjB,YAAY,CAAC,OAAO,CAAC,eAAe,EAAC,QAAQ,CAAC,CAAC;wBACjD,CAAC,EAAC,eAAK;4BACL,OAAO,CAAC,GAAG,CAAC,qCAAqC,GAAC,KAAK,CAAC,CAAC;wBAC3D,CAAC,CACA,CAAC;qBACL;oBACD,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;gBAC7B,CAAC,EAAE,eAAK;oBACN,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;gBACnC,CAAC,CAAC,CAAC;YACL,CAAC,EACD,eAAK;gBACH,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC/B,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;gBAC3B,KAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,sBAAsB,CAAC;YAC7D,CAAC,CACF,CAAC;QACN,CAAC,EACD,eAAK;YACH,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YACnD,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,IAAI,eAAe,EAAE;gBACxE,KAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,0BAA0B,CAAC;aAChE;iBAAM,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;gBAC1D,KAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,sBAAsB,CAAC;aAC5D;YACD,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC/B,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACT,CAAC;IAIH,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxID;AAAA;AAAA;AAAmD;AAOnD,IAAM,MAAM,GAAG;IACX;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+DAAc;KAC5B;CACJ,CAAC;AAEF;IAAA;IA0BA,CAAC;IAAD,kBAAC;AAAD,CAAC","file":"components-login-login-module-ngfactory-es5.js","sourcesContent":["<div #spinnerContainer [class]=\"showSpinner ? 'visible spinner center' : 'hidden spinner center'\" [innerHTML]=\"template\">     </div> <div id=\"loading-spinner-text\" class=\"loading-spinner-text\" [style.zIndex]=\"zIndex\" [class]=\"showSpinner ? 'visible loading-text' : 'hidden loading-text'\"> {{loadingText}} </div> ","<ng4-loading-spinner> </ng4-loading-spinner>\n<div class=\"content\" style=\"margin: 0px\">\n  <div class=\"login-block-page\">\n    <div class=\"col-sm-12\">\n      <div class=\"row\">\n        <div class=\"login-bg-image\" style=\"background: url(assets/Images/home-bg.jpg);\n        background-size: cover;\n        background-position: center center;\">\n        <!-- <img src=\"assets/Images/bg-login.png\" alt=\"bg image\" class=\"img-responsive\" width=\"100%;\"> -->\n        </div>\n\n        <div class=\"login-block\">\n            <div class=\"login\">\n                <div class=\"logo-title\"> <h3 class=\"form-title\">Login to your account</h3></div>\n               \n                <div class=\"logincontent\">\n                  <form [formGroup]=\"accountDetailsForm\" novalidate\n                    (ngSubmit)=\"onSubmitAccountDetails(accountDetailsForm.value)\">\n        \n                   \n                    <mat-form-field class=\"full-width\">\n                      <input matInput type=\"text\" placeholder=\"UserName\" formControlName=\"userName\" required>\n                      <mat-error *ngFor=\"let validation of account_validation_messages.userName\">\n                        <mat-error class=\"error-message\"\n                          *ngIf=\"accountDetailsForm.get('userName').hasError(validation.type) && (accountDetailsForm.get('userName').dirty || accountDetailsForm.get('userName').touched)\">\n                          {{validation.message}}</mat-error>\n                      </mat-error>\n                    </mat-form-field>\n        \n                    <mat-form-field class=\"full-width\">\n                      <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required>\n                      <mat-error *ngFor=\"let validation of account_validation_messages.password\">\n                        <mat-error class=\"error-message\"\n                          *ngIf=\"accountDetailsForm.get('password').hasError(validation.type) && (accountDetailsForm.get('password').dirty || accountDetailsForm.get('password').touched)\">\n                          {{validation.message}}</mat-error>\n                      </mat-error>\n                    </mat-form-field>\n        \n        <!--formControlName=\"terms\"-->\n                    <mat-checkbox >\n                      Remember me\n                    </mat-checkbox>\n                   <!--  <mat-error *ngFor=\"let validation of account_validation_messages.terms\">\n                      <mat-error class=\"error-message\"\n                        *ngIf=\"accountDetailsForm.get('terms').hasError(validation.type) && (accountDetailsForm.get('terms').dirty || accountDetailsForm.get('terms').touched)\">\n                        {{validation.message}}</mat-error>\n                    </mat-error> -->\n                    <div class=\"clear\"></div>\n                    <!-- <button mat-button color=\"primary\">Primary</button> -->\n   \n                  <button class=\"btn btn-primary\" color=\"primary\" mat-raised-button type=\"submit\"\n                    [disabled]=\"!accountDetailsForm.valid\">\n                    Login\n                  </button>\n\n                    <div class=\"form-actions\"></div>\n                  </form>\n                  <div class=\"row \">\n                    <div class=\"col-md-6 col-12\">\n                        <a href=\"javascript:;\" class=\"\" [routerLink]=\"['/forgotPassword']\" id=\"forget\"  style=\"color: #034dbf;font-size: 15px;text-decoration: underline;\">Reset password</a>\n                    </div>\n                    <div class=\"col-md-6 col-12\" *ngIf=\"!registrationFlag\">\n                        <a href=\"javascript:;\" id=\"register-btn\" [routerLink]=\"['/registration']\" style=\"color: #034dbf;font-size: 15px;text-decoration: underline;\">Create\n                          account</a>\n                    </div>\n                  </div>\n\n                  <!-- <div class=\"forget-password\">\n                    <h4>Forgot your password ?</h4>\n                    <p>\n                      Click <a href=\"javascript:;\" class=\"\" [routerLink]=\"['/forgotPassword']\" id=\"forget\"\n                        style=\"color:#ff0000;\">here</a>\n                      to Reset your password.\n                    </p>\n                  </div> -->\n        \n                  <!-- <div class=\"create-account\" *ngIf=\"registrationFlag\">\n                    <p>\n                      Don't have an account yet ?&nbsp;\n                      <a href=\"javascript:;\" id=\"register-btn\" [routerLink]=\"['/registration']\" style=\"color:#ff0000;\">Create an\n                        account</a>\n                    </p>\n                  </div> -->\n                </div>\n              </div>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</div>\n\n\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { AlertService } from '../../services/alert.service';\nimport { CommonService } from '../../common/common.service';\n\nimport {\n  ParentErrorStateMatcher,\n} from '../../validators';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UsersModel } from 'src/app/models/users.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class LoginComponent implements OnInit {\n  loginValidate: boolean = true;\n  registrationFlag: boolean = true;\n  returnUrl: string;\n  userDetailsForm: FormGroup;\n  accountDetailsForm: FormGroup;\n  invalid: boolean = false;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n  user: UsersModel;\n\n  parentErrorStateMatcher = new ParentErrorStateMatcher();\n\n  account_validation_messages = {\n    'userName': [\n      { type: 'required', message: 'User Name is required' },\n      { type: 'pattern', message: 'Enter a valid UserName' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n    ]\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private spinnerService: Ng4LoadingSpinnerService,\n    private authenticationService: AuthenticationService,\n    private alertService: AlertService,\n    private route: ActivatedRoute,\n    private commonService: CommonService\n  ) { }\n  ngOnInit() {\n    this.checkUsersExists();\n    this.loginValidate = true;\n    this.createForms();\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\n  }\n\n  checkUsersExists() {\n    this.authenticationService.checkUsersExists().subscribe(response => {\n      this.registrationFlag = response;\n    }, error => {\n      console.log(\"ERROR >>> \" + error)\n    });\n  }\n\n  createForms() {\n    // user links form validations\n    this.accountDetailsForm = this.fb.group({\n      userName: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.-]+$')\n      ])),\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required\n        // Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ]))//,\n\n    })\n\n  }\n\n  onSubmitAccountDetails(value) {\n    this.spinnerService.show();\n    let userName: string = this.accountDetailsForm.value.userName;\n    let password: string = this.accountDetailsForm.value.password;\n    this.authenticationService.login(userName, password)\n      .subscribe(\n        data => {\n          this.authenticationService.getLoginUserData(userName, password)\n            .subscribe(\n              userdata => {                \n                console.log('userdata: '+userdata);\n                this.router.navigate([this.returnUrl]);\n                this.authenticationService.getUserData(userdata.email, password).subscribe(response => {\n                  localStorage.setItem(\"menus\", response.menus);\n                  localStorage.setItem(\"loggedUser\", JSON.stringify(response));\n                  this.user = response;\n                  // To get User Hierarchy \n                  if(this.user){\n                    this.authenticationService.userHierarchy(this.user.userName)\n                      .subscribe(response => {\n                        localStorage.setItem(\"userHierarchy\",response);\n                      },error => {\n                        console.log(\"Trigger Function Not Available >>> \"+error);\n                      }\n                      );   \n                  }  \n                  this.spinnerService.hide();               \n                }, error => {\n                  console.log(\"ERROR >>> \" + error)\n                });\n              },\n              error => {\n                this.alertService.error(error);\n                this.spinnerService.hide();\n                this.commonService.showAlertMessage(\"Invalid Credentials.\")\n              }\n            );\n        },\n        error => {\n          console.log(\" >>> ERROR \" + JSON.stringify(error));\n          if (!!error && !!error.statusText && error.statusText == 'Unknown Error') {\n            this.commonService.showAlertMessage('Server not yet started..')\n          } else if (!!error && !!error.status && error.status > 200) {\n            this.commonService.showAlertMessage('Invalid credentials.')\n          }\n          this.invalid = true;\n          this.alertService.error(error);\n          this.spinnerService.hide();\n        });\n  }\n\n  \n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { LoginComponent } from './login.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatFormFieldModule, MatIconModule, MatCheckboxModule, MatInputModule, } from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\nimport { Ng4LoadingSpinnerModule } from 'ng4-loading-spinner';\n\nconst routes = [\n    {\n        path: '',\n        component: LoginComponent\n    }\n];\n\n@NgModule({\n    declarations: [\n        LoginComponent,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n        Ng4LoadingSpinnerModule.forRoot(),\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        CommonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatInputModule\n\n    ],\n    providers: [\n        Ng4LoadingSpinnerService,\n    ],\n    exports: [\n        LoginComponent\n    ]\n})\n\nexport class LoginModule {\n\n}\n"],"sourceRoot":""}