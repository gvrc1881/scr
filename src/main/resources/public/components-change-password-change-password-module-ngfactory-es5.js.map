{"version":3,"sources":["webpack:///./node_modules/ng4-loading-spinner/ng4-loading-spinner.d.ts.Ng4LoadingSpinnerComponent.html","webpack:///./src/app/components/change-password/change-password.component.html","webpack:///./src/app/components/change-password/change-password.component.ts","webpack:///./src/app/components/change-password/change-password.module.ts"],"names":[],"mappings":"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","file":"components-change-password-change-password-module-ngfactory-es5.js","sourcesContent":["<div #spinnerContainer [class]=\"showSpinner ? 'visible spinner center' : 'hidden spinner center'\" [innerHTML]=\"template\">     </div> <div id=\"loading-spinner-text\" class=\"loading-spinner-text\" [style.zIndex]=\"zIndex\" [class]=\"showSpinner ? 'visible loading-text' : 'hidden loading-text'\"> {{loadingText}} </div> ","<ng4-loading-spinner> </ng4-loading-spinner>\n<div class=\"content container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n        <div class=\"breadcrumb-section\">\n            <nav aria-label=\"breadcrumb\">\n                <ol class=\"breadcrumb\">\n                        <li class=\"breadcrumb-item\"><a [routerLink]=\"['/dashboard']\">Home</a></li>                      \n                          <li class=\"breadcrumb-item active\" aria-current=\"page\">Change Password</li>\n                </ol>\n            </nav>\n          </div>\n\n<div class=\"clear\"> </div>\n      <div class=\"row-fluid\">\n        <div class=\"panel panel-primary\">\n          <div class=\"panel-heading\">Change Password</div>\n          <div class=\"panel-body\">\n            <form [formGroup]=\"changePasswordDetailsForm\" novalidate\n              (ngSubmit)=\"onSubmitChangePasswordDetails(changePasswordDetailsForm.value)\">\n              <div class=\"col-md-12\">\n                <div class=\"col-md-3\">\n                  <mat-form-field class=\"full-width\">\n                    <input matInput type=\"password\" placeholder=\"Current Password\" formControlName=\"current_password\"\n                      required>\n                    <mat-error *ngFor=\"let validation of change_password_validation_messages.current_password\">\n                      <mat-error class=\"error-message\"\n                        *ngIf=\"changePasswordDetailsForm.get('current_password').hasError(validation.type) && (changePasswordDetailsForm.get('current_password').dirty || changePasswordDetailsForm.get('current_password').touched)\">\n                        {{validation.message}}</mat-error>\n                    </mat-error>\n                    <mat-error\n                      *ngIf=\"changePasswordDetailsForm.controls['current_password'].hasError('currentPasswordDuplicate')\"\n                      class=\"alert alert-danger\">\n                      Current password does not match.\n                    </mat-error>\n                  </mat-form-field>\n                </div>\n                <div formGroupName=\"matching_passwords\">\n                  <div class=\"col-md-3\">\n                    <mat-form-field class=\"full-width\">\n                      <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required\n                      pattern=\"^(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^!&*+=]).*$\">\n                      <mat-error *ngFor=\"let validation of change_password_validation_messages.password\">\n                        <mat-error class=\"error-message\"\n                          *ngIf=\"changePasswordDetailsForm.get('matching_passwords').get('password').hasError(validation.type) && (changePasswordDetailsForm.get('matching_passwords').get('password').dirty || changePasswordDetailsForm.get('matching_passwords').get('password').touched)\">\n                          {{validation.message}}</mat-error>\n                      </mat-error>\n                    </mat-form-field>\n                  </div>\n                  <div class=\"col-md-3\">\n                    <mat-form-field class=\"full-width\">\n                      <input matInput type=\"password\" placeholder=\"Confirm Password\" formControlName=\"confirm_password\"\n                        [errorStateMatcher]=\"parentErrorStateMatcher\" required\n                        pattern=\"^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d][A-Za-z\\d!@#$%^&*()_+]{8,15}$\">\n                      <mat-error *ngFor=\"let validation of change_password_validation_messages.confirm_password\">\n                        <mat-error class=\"error-message\"\n                          *ngIf=\"(changePasswordDetailsForm.get('matching_passwords').get('confirm_password').hasError(validation.type)|| changePasswordDetailsForm.get('matching_passwords').hasError(validation.type)) && (changePasswordDetailsForm.get('matching_passwords').get('confirm_password').dirty || changePasswordDetailsForm.get('matching_passwords').get('confirm_password').touched)\">\n                          {{validation.message}}</mat-error>\n                      </mat-error>\n                    </mat-form-field>\n                  </div>\n                </div>\n                <div class=\"col-md-3 submit-top\">\n                  <button class=\"submit-btn mat-raised-button mat-accent\" color=\"accent\" mat-raised-button type=\"submit\"\n                    [disabled]=\"!changePasswordDetailsForm.valid\">\n                    Update Password\n                  </button>\n                </div>\n              </div>\n              <div class=\"form-actions\"></div>\n            </form>\n            <div *ngIf=\"resetPassword\">\n              Password Updated Successfully.\n              please click <div class=\"login\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                <a class=\"link\" [routerLink]=\"['/login']\">Login</a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { AlertService } from '../../services/alert.service';\nimport {  \n  PasswordValidator,\n  ParentErrorStateMatcher,\n} from '../../validators';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { CommonService } from 'src/app/common/common.service';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ChangePasswordComponent implements OnInit {\n  loggedUserData: any = JSON.parse(localStorage.getItem('userData'));\n  tokenMessage: boolean = false;\n  tokenValid: boolean = true;\n  passwordBlock: boolean = true;\n  resetPassword: boolean = false;\n  returnUrl: string;\n  userDetailsForm: FormGroup;\n  changePasswordDetailsForm: FormGroup;\n  invalid: boolean = false;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n  tokenResponse: any;\n  parentErrorStateMatcher = new ParentErrorStateMatcher();\n\n\n\n  change_password_validation_messages = {\n    'current_password': [\n      { type: 'required', message: 'Current password is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' },\n      { type: 'areEqual', message: 'Password mismatch' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number' }\n    ]\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private spinnerService: Ng4LoadingSpinnerService,\n    private authenticationService: AuthenticationService,\n    private alertService: AlertService,\n    private route: ActivatedRoute,\n    private commonService: CommonService\n  ) { }\n\n  ngOnInit() {\n    this.createForms();\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\n  }\n\n\n\n\n  createForms() {\n    // matching passwords validation\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(8),\n        Validators.required,\n        Validators.pattern('^(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^!&*+=]).*$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    this.changePasswordDetailsForm = this.fb.group({\n      current_password: new FormControl('', Validators.compose([\n        Validators.required,\n      ]), this.duplicateDepartment.bind(this)),\n      matching_passwords: this.matching_passwords_group,\n    })\n\n  }\n\n  duplicateDepartment() {\n    const q = new Promise((resolve, reject) => {\n      let current_password: string = this.changePasswordDetailsForm.controls['current_password'].value;\n      let email: string = this.loggedUserData.email;\n      this.authenticationService.validateCurrentPassword(current_password, email).subscribe((duplicate) => {\n        if (!duplicate) {\n          resolve({ 'currentPasswordDuplicate': true });\n        } else {\n          resolve(null);\n        }\n      }, () => { resolve({ 'currentPasswordDuplicate': true }); });\n    });\n    return q;\n  }\n\n  onSubmitChangePasswordDetails(value) {\n    this.spinnerService.show();\n    let email: string = this.loggedUserData.email;\n    let password: string = value.matching_passwords.password;\n    let user = {\n      \"email\": email,\n      \"password\": password\n    }\n    this.authenticationService.updatePassword(user)\n      .subscribe(\n        response => {\n          console.log('response: ' + JSON.stringify(response))\n          if (!!response && response.code == 200) {\n            this.commonService.showAlertMessage('Password Updated Successfully. Please login with updated password');\n            this.router.navigate(['/login']);\n\n          } else {\n\n            this.commonService.showAlertMessage('Password Updation Failed.');\n          }\n        },\n        error => {\n          this.invalid = true;\n          this.alertService.error(error);\n          this.spinnerService.hide();\n        });\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ChangePasswordComponent } from './change-password.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule, MatIconModule, MatCheckboxModule, MatInputModule, } from '@angular/material';\r\nimport { CommonModule } from '@angular/common';\r\nimport {  Ng4LoadingSpinnerModule } from 'ng4-loading-spinner';\r\n\r\nconst routes = [\r\n    {\r\n        path     : '',\r\n        component: ChangePasswordComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ChangePasswordComponent,        \r\n    ],\r\n    imports     : [        \r\n        RouterModule.forChild(routes),    \r\n        Ng4LoadingSpinnerModule.forRoot(),   \r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatFormFieldModule,\r\n        CommonModule,\r\n        MatIconModule,\r\n        MatCheckboxModule,\r\n        MatInputModule\r\n        \r\n    ],\r\n    providers: [\r\n          \r\n    ],\r\n    exports:[\r\n        ChangePasswordComponent\r\n    ]\r\n})\r\n\r\nexport class ChangePasswordModule\r\n{\r\n\r\n}\r\n"],"sourceRoot":""}