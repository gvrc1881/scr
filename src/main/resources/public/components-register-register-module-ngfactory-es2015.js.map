{"version":3,"sources":["./src/app/components/register/register.component.html","./src/app/components/register/register.component.ts","./src/app/components/register/register.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uGAiBgB,6VACsK,gFAC9I,iCAFxB,qGACsK,+EAC9I;uGAH1B,mVAAgF,IAC9E,0YACsK,iDAApK,wLAAmK,aADrK,YACsK,EAApK,SAAmK,2BAFvK,qGAAgF;uGAS9E,6VAC6J,gFACrI,iCAFxB,qGAC6J,+EACrI;uGAH1B,oVAA6E,IAC3E,0YAC6J,iDAA3J,+KAA0J,aAD5J,YAC6J,EAA3J,SAA0J,2BAF9J,qGAA6E;uGAYzE,6VACoP,gFAC5N,iCAFxB,qGACoP,+EAC5N;uGAH1B,oVAAgF,IAC9E,0YACoP,iDAAlP,sQAAiP,aADnP,YACoP,EAAlP,SAAiP,2BAFrP,qGAAgF;uGAW9E,6VACwV,gFAChU,iCAFxB,qGACwV,+EAChU;uGAH1B,oVAAwF,IACtF,0YACwV,iDAAtV,yXAAqV,aADvV,YACwV,EAAtV,SAAqV,2BAFzV,qGAAwF;wGAY1F,6VAC6J,gFACrI,iCAFxB,qGAC6J,+EACrI;wGAH1B,+UAA6E,IAC3E,2YAC6J,iDAA3J,+KAA0J,aAD5J,YAC6J,EAA3J,SAA0J,2BAF9J,qGAA6E;uGA9C/E;;;;;wBACiE;MAA/D;;wBAA8D;MADhE,g0BACiE,IAG/D,kqFAAmC,MACjC;;;;;;;;;;;;;;;;;;;;;mkGAA0F,KAC1F,idAAgF,IAMlF,6qFAAmC,MACjC;;;;;;;;;;;;;;;;;;;;;k1FAAkF,KAClF,idAA6E,IAO/E,q/BAAwC,IACtC,6qFAAmC,MACjC;;;;;;;;;;;;;;;;;;;;;k1FACA,KACA,idAAgF,IAOlF,6qFAAmC,MACjC;;;;;;;;;;;;;;;;;;;;;+3FACyD,KACzD,kdAAwF,IAQ5F,46EAAsC,wGAEtC,MACA,sdAA6E,IAM7E,g5BAC0C,iFAE1C,mDAvDI,mBAAiC,sBAAvC,YACiE,EAD3D,SAAiC,GAK8C,mBAAQ,EAAzF,aAA0F,EAAT,UAAQ,GAAzE,qBAAc,EAA9B,aAA0F,EAA1E,UAAc,GAAwB,2BAA0B,EAAhF,aAA0F,EAApC,UAA0B,GAAjD,2BAAsB,EAA4B,mBAAQ,EAAzF,aAA0F,EAA3D,UAAsB,EAA4B,UAAQ,GAC9E,oBAAoE,4CAA/E,aAAgF,EAArE,UAAoE,GAON,mBAAQ,EAAjF,aAAkF,EAAT,UAAQ,GAAhC,wBAAuB,EAAxE,aAAkF,EAAjC,UAAuB,GAA3C,wBAAmB,EAAyB,mBAAQ,EAAjE,wBAAY,EAA5B,aAAkF,EAArD,UAAmB,EAAyB,UAAQ,EAAjE,UAAY,GACjB,oBAAiE,yCAA5E,aAA6E,EAAlE,UAAiE,GAOzE,sCAAkC,EAAvC,aAAwC,EAAnC,WAAkC,GAE+C,oBAAQ,EAA1F,aACA,EADkF,WAAQ,GAAnC,4BAA0B,EAAjF,aACA,EADuD,WAA0B,GAAjD,4BAAsB,EAA4B,oBAAQ,EAA1E,4BAAe,EAA/B,aACA,EADgC,WAAsB,EAA4B,WAAQ,EAA1E,WAAe,GAEpB,qBAAoE,4CAA/E,aAAgF,EAArE,WAAoE,GAS/B,oBAAQ,EADxD,aACyD,EAAT,WAAQ,GADO,oCAAkC,EAAjG,aACyD,EADM,WAAkC,GAAjE,oCAA8B,EACd,oBAAQ,EADxC,4BAAe,EAC7B,qBAA6C,0BAD/C,aACyD,EADzB,WAA8B,EACd,WAAQ,EADxC,WAAe,EAC7B,WAA6C,GACpC,qBAA4E,oDAAvF,cAAwF,EAA7E,WAA4E,GAQ7E,yBAAuB,EAArC,cAAsC,EAAxB,WAAuB,GAG1B,qBAAiE,yCAA5E,cAA6E,EAAlE,WAAiE,GAO1E,sBAAuC,4BADd,2BAAe,EAA1C,cAC0C,EAAxC,WAAuC,EADd,WAAe,2BApD5C,8sBACiE,GAG/D,y4EAAmC,IACjC,k/DAA0F,IAO5F,o6EAAmC,IACjC,+zDAAkF,IAQpF,gvBAAwC,GACtC,g9EAAmC,IACjC,i2DACA,IAQF,g9EAAmC,IACjC,i2DACyD,IAS7D,46CAAsC,IAStC,+PAC0C;uGA/DtD,iLAA0D,KACxD,wIAAiB,KACb,mJAA4B,KAI9B,8IAAuB,KACrB,2JAAoC,KAClC,wIAAkB,KAAC,6IAAuB,8FAAiB,MAC3D,gJAA0B,KACxB,2YACiE,IAyDlE,uHAAI,KACH,oMAAiE,KAC/D;;;oZAA0C,GAA1B,wDAAyB,IAAC,wFAAgB,MAMlE,6IAAsB,kDAlEmC,mBAAsB,iBAAzE,aACiE,EADd,SAAsB,GA4DvD,uCAAyB,GAAzC,aAA0C,EAA1B,SAAyB,2BAAzC,uMAA0C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEtD;AAAA;AAAA;AAAA;AAAA;AAAqE;AACY;AAOvD;AAYnB,MAAM,iBAAiB;IAoE5B,YACU,EAAe,EACf,cAAwC,EACxC,qBAA4C,EAC5C,aAA4B;QAH5B,OAAE,GAAF,EAAE,CAAa;QACf,mBAAc,GAAd,cAAc,CAA0B;QACxC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kBAAa,GAAb,aAAa,CAAe;QAtEtC,mBAAc,GAAS,IAAI,CAAC;QAM5B,4BAAuB,GAAG,IAAI,mEAAuB,EAAE,CAAC;QAExD,YAAO,GAAG;YACR,MAAM;YACN,QAAQ;YACR,OAAO;SACR,CAAC;QAEF,cAAS,GAAG;YACV,IAAI,mDAAO,CAAC,IAAI,EAAE,SAAS,CAAC;YAC5B,IAAI,mDAAO,CAAC,IAAI,EAAE,eAAe,CAAC;YAClC,IAAI,mDAAO,CAAC,IAAI,EAAE,WAAW,CAAC;SAC/B,CAAC;QAGF,wBAAmB,GAAG;YACpB,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE;aACvD;YACD,KAAK,EAAE;gBACL,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;aAC9E;YACD,QAAQ,EAAE;gBACR,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,2BAA2B,EAAE;aAC3D;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,6BAA6B,EAAE;aAC7D;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,mBAAmB,EAAE,OAAO,EAAE,0CAA0C,EAAE;aACnF;SACF,CAAC;QAEF,qCAAgC,GAAG;YACjC,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;gBAC7E,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,iDAAiD,EAAE;gBAClF,uFAAuF;gBACtF,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,sCAAsC,EAAE;aAC3E;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;gBAClD,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,qBAAqB,EAAE;aACpD;YACD,kBAAkB,EAAE;gBAClB,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,8BAA8B,EAAE;gBAC7D,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;aACnD;YACD,UAAU,EAAE;gBACV,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,sBAAsB,EAAE;gBACrD,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,6CAA6C,EAAE;gBAC5E,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,wGAAwG,EAAE;aACxI;YACD,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,sCAAsC,EAAE;aACrE;SACF;IAOK,CAAC;IAEP,QAAQ;QACN,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,gCAAgC;QAChC,IAAI,CAAC,wBAAwB,GAAG,IAAI,wDAAS,CAAC;YAC5C,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC/C,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,uDAAuD,CAAC;aAC5E,CAAC,CAAC;YACH,gBAAgB,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC3D,EAAE,CAAC,SAAoB,EAAE,EAAE;YAC1B,OAAO,6DAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,6BAA6B;QAC7B,IAAI,OAAO,GAAG,IAAI,0DAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,yDAAU,CAAC,QAAQ,CAAC,CAAC;QAEtE,IAAI,KAAK,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YAC9B,UAAU,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC7B,yDAAU,CAAC,QAAQ;gBACnB,0DAAc,CAAC,iBAAiB,CAAC,OAAO,CAAC;aAC1C,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,GAAG,IAAI,wDAAS,CAAC;YACvC,OAAO,EAAE,OAAO;YAChB,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,gCAAgC;QAChC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACnC,QAAQ,EAAE,CAAC,gBAAgB,EAAE,yDAAU,CAAC,QAAQ,CAAE;YAClD,GAAG,EAAE,CAAC,yJAAyJ,EAAE,yDAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3L,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,MAAM,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC7D,aAAa,EAAE,IAAI,CAAC,mBAAmB;SACxC,CAAC,CAAC;QAGH,8BAA8B;QAC9B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACvC,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAChD,6DAAiB,CAAC,aAAa;gBAC/B,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,gEAAgE;gBAChE,yDAAU,CAAC,QAAQ;aACnB,CAAC,CAAC;YACH,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;gBAC5C,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,OAAO,CAAC,iDAAiD,CAAC;aACtE,CAAC,CAAC;YACH,kBAAkB,EAAE,IAAI,CAAC,wBAAwB;YACjD,KAAK,EAAE,IAAI,0DAAW,CAAC,KAAK,EAAE,yDAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC1D,CAAC;IAEJ,CAAC;IAED;;QAEI;IAEJ,sBAAsB,CAAC,KAAK;QAC1B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC3B,IAAI,QAAQ,GAAU,KAAK,CAAC,QAAQ;QACpC,IAAI,KAAK,GAAS,KAAK,CAAC,KAAK,CAAC;QAC9B,IAAI,QAAQ,GAAQ,KAAK,CAAC,kBAAkB,CAAC,QAAQ,CAAC;QACtD,IAAI,QAAQ,GAAG;YACb,SAAS,EAAE,IAAI;YACf,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,KAAK;YACd,UAAU,EAAE,QAAQ;YACpB,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,CAAC;YACX,cAAc,EAAE,IAAI;YACpB,YAAY,EAAE,CAAC;YACf,aAAa,EAAE,IAAI;YACnB,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,EAAE;YACX,YAAY,EAAE,IAAI;YAClB,aAAa,EAAE,IAAI;YACnB,cAAc,EAAE,EAAE;YAClB,WAAW,EAAE,IAAI;YACjB,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,CAAC;SACjB,CAAC;QACC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAC,KAAK,GAAC,KAAK,GAAE,KAAK,GAAC,QAAQ,CAAC,CAAC;QAElD,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACjE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,WAAW,GAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,CAAC;YAChE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC/B,CAAC,EAAE,KAAK,CAAC,EAAE;YACV,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,YAAY,GAAC,KAAK,CAAC,CAAC;YAChC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;YAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC9B,CAAC,CAAC,CAAC;IACJ,CAAC;CAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvMD;AAAA;AAAA;AAAyD;AAKzD;;;GAGG;AAEH,MAAM,MAAM,GAAG;IACX;QACI,IAAI,EAAO,EAAE;QACb,SAAS,EAAE,qEAAiB;KAC/B;CACJ,CAAC;AA2BK,MAAM,cAAc;CAG1B","file":"components-register-register-module-ngfactory-es2015.js","sourcesContent":["<div class=\"content container-fluid registration-content\">\n  <div class=\"row\">\n      <div class=\"login-bg-image\">\n       \n     \n\n    <div class=\"col-sm-12\">\n      <div class=\"login registration-box\">\n        <div class=\"logo\"> <h3 class=\"form-title\">Create an Account</h3></div>\n        <div class=\"logincontent\">\n          <form [formGroup]=\"registerDetailsForm\" novalidate *ngIf=\"registerSucces\"\n            (ngSubmit)=\"onSubmitAccountDetails(registerDetailsForm.value)\">\n\n           \n            <mat-form-field class=\"full-width\">\n              <input matInput maxlength=\"25\" placeholder=\"Username\" formControlName=\"username\" required>\n              <mat-error *ngFor=\"let validation of registration_validation_messages.username\">\n                <mat-error class=\"error-message\"\n                  *ngIf=\"registerDetailsForm.get('username').hasError(validation.type) && (registerDetailsForm.get('username').dirty || registerDetailsForm.get('username').touched)\">\n                  {{validation.message}}</mat-error>\n              </mat-error>\n            </mat-form-field>\n            <mat-form-field class=\"full-width\">\n              <input matInput type=\"email\" placeholder=\"Email\" formControlName=\"email\" required>\n              <mat-error *ngFor=\"let validation of registration_validation_messages.email\">\n                <mat-error class=\"error-message\"\n                  *ngIf=\"registerDetailsForm.get('email').hasError(validation.type) && (registerDetailsForm.get('email').dirty || registerDetailsForm.get('email').touched)\">\n                  {{validation.message}}</mat-error>\n              </mat-error>\n            </mat-form-field>\n\n            <div formGroupName=\"matching_passwords\">\n              <mat-form-field class=\"full-width\">\n                <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required\n               >\n                <mat-error *ngFor=\"let validation of registration_validation_messages.password\">\n                  <mat-error class=\"error-message\"\n                    *ngIf=\"registerDetailsForm.get('matching_passwords').get('password').hasError(validation.type) && (registerDetailsForm.get('matching_passwords').get('password').dirty || registerDetailsForm.get('matching_passwords').get('password').touched)\">\n                    {{validation.message}}</mat-error>\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field class=\"full-width\">\n                <input matInput type=\"password\" placeholder=\"Confirm Password\" formControlName=\"confirm_password\"\n                  [errorStateMatcher]=\"parentErrorStateMatcher\" required>\n                <mat-error *ngFor=\"let validation of registration_validation_messages.confirm_password\">\n                  <mat-error class=\"error-message\"\n                    *ngIf=\"(registerDetailsForm.get('matching_passwords').get('confirm_password').hasError(validation.type)|| registerDetailsForm.get('matching_passwords').hasError(validation.type)) && (registerDetailsForm.get('matching_passwords').get('confirm_password').dirty || registerDetailsForm.get('matching_passwords').get('confirm_password').touched)\">\n                    {{validation.message}}</mat-error>\n                </mat-error>\n              </mat-form-field>\n            </div>\n\n            <mat-checkbox formControlName=\"terms\">\n              I accept terms and conditions\n            </mat-checkbox>\n            <mat-error *ngFor=\"let validation of registration_validation_messages.terms\">\n              <mat-error class=\"error-message\"\n                *ngIf=\"registerDetailsForm.get('terms').hasError(validation.type) && (registerDetailsForm.get('terms').dirty || registerDetailsForm.get('terms').touched)\">\n                {{validation.message}}</mat-error>\n            </mat-error>\n\n            <button class=\"submit-btn\" color=\"primary\" mat-raised-button type=\"submit\"\n              [disabled]=\"!registerDetailsForm.valid\">\n              Submit\n            </button>\n          \n          </form>\n         <hr>\n          <div class=\"login1\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n            <a class=\"link\" [routerLink]=\"['/login']\">Go back to login</a>\n          </div>\n        \n        </div>\n      </div>\n    </div>\n    <div class=\"clearfix\"></div>\n  </div>\n</div>\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport {\n  Country,\n  UsernameValidator,\n  PasswordValidator,\n  ParentErrorStateMatcher,\n  PhoneValidator\n} from '../../validators';\nimport { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { CommonService } from 'src/app/common/common.service';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class RegisterComponent implements OnInit {\n\n  registerSucces:boolean=true;\n  userDetailsForm: FormGroup;\n  registerDetailsForm: FormGroup;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n\n  parentErrorStateMatcher = new ParentErrorStateMatcher();\n\n  genders = [\n    \"Male\",\n    \"Female\",\n    \"Other\"\n  ];\n\n  countries = [\n    new Country('UY', 'Uruguay'),\n    new Country('US', 'United States'),\n    new Country('AR', 'Argentina')\n  ];\n\n\n  validation_messages = {\n    'fullname': [\n      { type: 'required', message: 'Full name is required' }\n    ],\n    'bio': [\n      { type: 'maxlength', message: 'Bio cannot be more than 256 characters long' },\n    ],\n    'gender': [\n      { type: 'required', message: 'Please select your gender' },\n    ],\n    'birthday': [\n      { type: 'required', message: 'Please insert your birthday' },\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required' },\n      { type: 'validCountryPhone', message: 'Phone incorrect for the country selected' }\n    ]\n  };\n\n  registration_validation_messages = {\n    'username': [\n      { type: 'required', message: 'Username is required' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long' },\n     // { type: 'pattern', message: 'Your username must contain only numbers and letters' },\n      { type: 'validUsername', message: 'Your username has already been taken' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required' },\n      { type: 'pattern', message: 'Enter a valid email' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required' },\n      { type: 'areEqual', message: 'Password mismatch' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long' },\n       { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, one number and one special character' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions' }\n    ]\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private spinnerService: Ng4LoadingSpinnerService,\n    private authenticationService: AuthenticationService,\n    private commonService: CommonService\n    ) { }\n\n  ngOnInit() {\n    this.createForms();\n  }\n\n  createForms() {\n    // matching passwords validation\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(8),\n        Validators.required,\n        Validators.pattern('^(?=.{8,})(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^!&*+=]).*$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    // country & phone validation\n    let country = new FormControl(this.countries[0], Validators.required);\n\n    let phone = new FormControl('', {\n      validators: Validators.compose([\n        Validators.required,\n        PhoneValidator.validCountryPhone(country)\n      ])\n    });\n\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    // user details form validations\n    this.userDetailsForm = this.fb.group({\n      fullname: ['Homero Simpson', Validators.required ],\n      bio: [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\", Validators.maxLength(256)],\n      birthday: ['', Validators.required],\n      gender: new FormControl(this.genders[0], Validators.required),\n      country_phone: this.country_phone_group\n    });\n\n\n    // user links form validations\n    this.registerDetailsForm = this.fb.group({\n      username: new FormControl('', Validators.compose([\n       UsernameValidator.validUsername,\n       Validators.maxLength(25),\n       Validators.minLength(5),\n       //Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n       Validators.required\n      ])),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(false, Validators.pattern('true'))\n    })\n\n  }\n\n  /* onSubmitAccountDetails(value){\n    console.log(value);\n  } */\n\n  onSubmitAccountDetails(value){\n    console.log(value);\n    this.spinnerService.show();\n    let username:string = value.username\n    let email:string =value.email;\n    let password:string=value.matching_passwords.password;\n    let register = {\n      \"user_id\": null,\n      \"username\": username,\n      \"email\": email,\n      \"password\": password,\n      \"first_name\": \"\",\n      \"last_name\": \"\",\n      \"gender\": 1,\n      \"day_of_birth\": null,\n      \"department\": 1,\n      \"designation\": null,\n      \"address\": null,\n      \"phone\": \"\",\n      \"issue_date\": null,\n      \"expire_date\": null,\n      \"privilege_id\": \"\",\n      \"createdBy\": null,\n      \"roleTypeId\": 5,\n      \"status_id\": 1\n  };\n     console.log(username+\" : \"+email+ \" : \"+password);\n\n     this.authenticationService.addUser(register).subscribe(response =>{\n      this.spinnerService.hide();\n      console.log(\"response \"+JSON.stringify(response));    \n      this.commonService.showAlertMessage(\"User Added Successfully.\");   \n      this.registerSucces = false;         \n   }, error =>{\n    this.spinnerService.hide();\n      console.log(\"ERROR >>> \"+error);\n      this.commonService.showAlertMessage(\"User Added Failed.\");\n      this.registerSucces = true;      \n   });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { RegisterComponent } from './register.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { MatFormFieldModule, MatIconModule, MatCheckboxModule, MatInputModule, } from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from 'src/app/modules/material.modules';\n/* import { Ng4LoadingSpinnerService } from 'ng4-loading-spinner';\nimport { AuthenticationService } from 'src/app/services/authentication.service';\nimport { AlertService } from 'src/app/services/alert.service';\n */\n\nconst routes = [\n    {\n        path     : '',\n        component: RegisterComponent\n    }\n];\n\n@NgModule({\n    declarations: [\n        RegisterComponent,        \n    ],\n    imports     : [        \n        RouterModule.forChild(routes),       \n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        CommonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatInputModule,\n        MaterialModule\n    ],\n    providers: [\n       /* Ng4LoadingSpinnerService,\n       AuthenticationService,\n       AlertService */    \n    ],\n    exports:[\n        RegisterComponent\n    ]\n})\n\nexport class RegisterModule\n{\n\n}\n"],"sourceRoot":""}